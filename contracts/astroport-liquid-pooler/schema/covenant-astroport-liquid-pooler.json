{
  "contract_name": "covenant-astroport-liquid-pooler",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "assets",
      "clock_address",
      "holder_address",
      "pair_type",
      "pool_address",
      "pool_price_config",
      "single_side_lp_limits"
    ],
    "properties": {
      "assets": {
        "$ref": "#/definitions/AssetData"
      },
      "clock_address": {
        "type": "string"
      },
      "holder_address": {
        "type": "string"
      },
      "pair_type": {
        "$ref": "#/definitions/PairType"
      },
      "pool_address": {
        "type": "string"
      },
      "pool_price_config": {
        "$ref": "#/definitions/PoolPriceConfig"
      },
      "single_side_lp_limits": {
        "$ref": "#/definitions/SingleSideLpLimits"
      },
      "slippage_tolerance": {
        "anyOf": [
          {
            "$ref": "#/definitions/Decimal"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetData": {
        "description": "holds the both asset denoms relevant for providing liquidity",
        "type": "object",
        "required": [
          "asset_a_denom",
          "asset_b_denom"
        ],
        "properties": {
          "asset_a_denom": {
            "type": "string"
          },
          "asset_b_denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "PairType": {
        "description": "This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from(\"Custom\")); ```",
        "oneOf": [
          {
            "description": "XYK pair type",
            "type": "object",
            "required": [
              "xyk"
            ],
            "properties": {
              "xyk": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Stable pair type",
            "type": "object",
            "required": [
              "stable"
            ],
            "properties": {
              "stable": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pair type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolPriceConfig": {
        "description": "config for the pool price expectations upon covenant instantiation",
        "type": "object",
        "required": [
          "acceptable_price_spread",
          "expected_spot_price"
        ],
        "properties": {
          "acceptable_price_spread": {
            "$ref": "#/definitions/Decimal"
          },
          "expected_spot_price": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "SingleSideLpLimits": {
        "description": "single side lp limits define the highest amount (in `Uint128`) that we consider acceptable to provide single-sided. if asset balance exceeds these limits, double-sided liquidity should be provided.",
        "type": "object",
        "required": [
          "asset_a_limit",
          "asset_b_limit"
        ],
        "properties": {
          "asset_a_limit": {
            "$ref": "#/definitions/Uint128"
          },
          "asset_b_limit": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Wakes the state machine up. The caller should check the sender of the tick is the clock if they'd like to pause when the clock does.",
        "type": "object",
        "required": [
          "tick"
        ],
        "properties": {
          "tick": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Tells the LPer to withdraw his position Should only be called by the holder of the covenant",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "properties": {
              "percentage": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "contract_state"
        ],
        "properties": {
          "contract_state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "holder_address"
        ],
        "properties": {
          "holder_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lp_config"
        ],
        "properties": {
          "lp_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "provided_liquidity_info"
        ],
        "properties": {
          "provided_liquidity_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the associated clock address authorized to submit ticks",
        "type": "object",
        "required": [
          "clock_address"
        ],
        "properties": {
          "clock_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the address a contract expects to receive funds to",
        "type": "object",
        "required": [
          "deposit_address"
        ],
        "properties": {
          "deposit_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "clock_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "holder_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "lp_config": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/LpConfig"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_code_id"
        ],
        "properties": {
          "update_code_id": {
            "type": "object",
            "properties": {
              "data": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AssetData": {
        "description": "holds the both asset denoms relevant for providing liquidity",
        "type": "object",
        "required": [
          "asset_a_denom",
          "asset_b_denom"
        ],
        "properties": {
          "asset_a_denom": {
            "type": "string"
          },
          "asset_b_denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DecimalRange": {
        "type": "object",
        "required": [
          "max",
          "min"
        ],
        "properties": {
          "max": {
            "$ref": "#/definitions/Decimal"
          },
          "min": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "LpConfig": {
        "type": "object",
        "required": [
          "asset_data",
          "expected_pool_ratio_range",
          "pair_type",
          "pool_address",
          "single_side_lp_limits"
        ],
        "properties": {
          "asset_data": {
            "description": "denoms of both parties",
            "allOf": [
              {
                "$ref": "#/definitions/AssetData"
              }
            ]
          },
          "expected_pool_ratio_range": {
            "description": "expected price range",
            "allOf": [
              {
                "$ref": "#/definitions/DecimalRange"
              }
            ]
          },
          "pair_type": {
            "description": "pair type specified in the covenant",
            "allOf": [
              {
                "$ref": "#/definitions/PairType"
              }
            ]
          },
          "pool_address": {
            "description": "address of the liquidity pool we plan to enter",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "single_side_lp_limits": {
            "description": "amounts of both tokens we consider ok to single-side lp",
            "allOf": [
              {
                "$ref": "#/definitions/SingleSideLpLimits"
              }
            ]
          },
          "slippage_tolerance": {
            "description": "slippage tolerance parameter for liquidity provisioning",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PairType": {
        "description": "This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from(\"Custom\")); ```",
        "oneOf": [
          {
            "description": "XYK pair type",
            "type": "object",
            "required": [
              "xyk"
            ],
            "properties": {
              "xyk": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Stable pair type",
            "type": "object",
            "required": [
              "stable"
            ],
            "properties": {
              "stable": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pair type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SingleSideLpLimits": {
        "description": "single side lp limits define the highest amount (in `Uint128`) that we consider acceptable to provide single-sided. if asset balance exceeds these limits, double-sided liquidity should be provided.",
        "type": "object",
        "required": [
          "asset_a_limit",
          "asset_b_limit"
        ],
        "properties": {
          "asset_a_limit": {
            "$ref": "#/definitions/Uint128"
          },
          "asset_b_limit": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "sudo": null,
  "responses": {
    "clock_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "contract_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractState",
      "description": "state of the LP state machine",
      "type": "string",
      "enum": [
        "instantiated"
      ]
    },
    "deposit_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "holder_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "lp_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LpConfig",
      "type": "object",
      "required": [
        "asset_data",
        "expected_pool_ratio_range",
        "pair_type",
        "pool_address",
        "single_side_lp_limits"
      ],
      "properties": {
        "asset_data": {
          "description": "denoms of both parties",
          "allOf": [
            {
              "$ref": "#/definitions/AssetData"
            }
          ]
        },
        "expected_pool_ratio_range": {
          "description": "expected price range",
          "allOf": [
            {
              "$ref": "#/definitions/DecimalRange"
            }
          ]
        },
        "pair_type": {
          "description": "pair type specified in the covenant",
          "allOf": [
            {
              "$ref": "#/definitions/PairType"
            }
          ]
        },
        "pool_address": {
          "description": "address of the liquidity pool we plan to enter",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "single_side_lp_limits": {
          "description": "amounts of both tokens we consider ok to single-side lp",
          "allOf": [
            {
              "$ref": "#/definitions/SingleSideLpLimits"
            }
          ]
        },
        "slippage_tolerance": {
          "description": "slippage tolerance parameter for liquidity provisioning",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetData": {
          "description": "holds the both asset denoms relevant for providing liquidity",
          "type": "object",
          "required": [
            "asset_a_denom",
            "asset_b_denom"
          ],
          "properties": {
            "asset_a_denom": {
              "type": "string"
            },
            "asset_b_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DecimalRange": {
          "type": "object",
          "required": [
            "max",
            "min"
          ],
          "properties": {
            "max": {
              "$ref": "#/definitions/Decimal"
            },
            "min": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "PairType": {
          "description": "This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from(\"Custom\")); ```",
          "oneOf": [
            {
              "description": "XYK pair type",
              "type": "object",
              "required": [
                "xyk"
              ],
              "properties": {
                "xyk": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Stable pair type",
              "type": "object",
              "required": [
                "stable"
              ],
              "properties": {
                "stable": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Custom pair type",
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SingleSideLpLimits": {
          "description": "single side lp limits define the highest amount (in `Uint128`) that we consider acceptable to provide single-sided. if asset balance exceeds these limits, double-sided liquidity should be provided.",
          "type": "object",
          "required": [
            "asset_a_limit",
            "asset_b_limit"
          ],
          "properties": {
            "asset_a_limit": {
              "$ref": "#/definitions/Uint128"
            },
            "asset_b_limit": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "provided_liquidity_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProvidedLiquidityInfo",
      "description": "keeps track of provided asset liquidities in `Uint128`.",
      "type": "object",
      "required": [
        "provided_amount_a",
        "provided_amount_b"
      ],
      "properties": {
        "provided_amount_a": {
          "$ref": "#/definitions/Uint128"
        },
        "provided_amount_b": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
