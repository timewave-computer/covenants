{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "assets",
    "clock_address",
    "holder_address",
    "pair_type",
    "pool_address",
    "pool_price_config",
    "single_side_lp_limits"
  ],
  "properties": {
    "assets": {
      "$ref": "#/definitions/AssetData"
    },
    "clock_address": {
      "type": "string"
    },
    "holder_address": {
      "type": "string"
    },
    "pair_type": {
      "$ref": "#/definitions/PairType"
    },
    "pool_address": {
      "type": "string"
    },
    "pool_price_config": {
      "$ref": "#/definitions/PoolPriceConfig"
    },
    "single_side_lp_limits": {
      "$ref": "#/definitions/SingleSideLpLimits"
    },
    "slippage_tolerance": {
      "anyOf": [
        {
          "$ref": "#/definitions/Decimal"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AssetData": {
      "description": "holds the both asset denoms relevant for providing liquidity",
      "type": "object",
      "required": [
        "asset_a_denom",
        "asset_b_denom"
      ],
      "properties": {
        "asset_a_denom": {
          "type": "string"
        },
        "asset_b_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "PairType": {
      "description": "This enum describes available pair types. ## Available pool types ``` # use astroport::factory::PairType::{Custom, Stable, Xyk}; Xyk {}; Stable {}; Custom(String::from(\"Custom\")); ```",
      "oneOf": [
        {
          "description": "XYK pair type",
          "type": "object",
          "required": [
            "xyk"
          ],
          "properties": {
            "xyk": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stable pair type",
          "type": "object",
          "required": [
            "stable"
          ],
          "properties": {
            "stable": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom pair type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolPriceConfig": {
      "description": "config for the pool price expectations upon covenant instantiation",
      "type": "object",
      "required": [
        "acceptable_price_spread",
        "expected_spot_price"
      ],
      "properties": {
        "acceptable_price_spread": {
          "$ref": "#/definitions/Decimal"
        },
        "expected_spot_price": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "SingleSideLpLimits": {
      "description": "single side lp limits define the highest amount (in `Uint128`) that we consider acceptable to provide single-sided. if asset balance exceeds these limits, double-sided liquidity should be provided.",
      "type": "object",
      "required": [
        "asset_a_limit",
        "asset_b_limit"
      ],
      "properties": {
        "asset_a_limit": {
          "$ref": "#/definitions/Uint128"
        },
        "asset_b_limit": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
