{
  "contract_name": "covenant-clock",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "whitelist"
    ],
    "properties": {
      "tick_max_gas": {
        "description": "The max gas that may be used by a tick receiver. If more than this amount of gas is used, the tick will be treated as if it errored, and it will be sent to the back of the queue.\n\nAt the most, this should be no larger than 100_000 gas less the chain's block max gas. This overhead is needed so the clock always has enough gas after executing the tick to handle its failure.\n\nThis value may be updated later by the contract admin.",
        "anyOf": [
          {
            "$ref": "#/definitions/Uint64"
          },
          {
            "type": "null"
          }
        ]
      },
      "whitelist": {
        "description": "Whitelist of contracts that are allowed to be queued and ticked",
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Enqueues the message sender for ticks (serialized as messages in the form `{\"tick\": {}}`). The sender will continue to receive ticks until sending a `Dequeue {}` message. Only callable if the message sender is not currently enqueued and is a contract.",
        "type": "object",
        "required": [
          "enqueue"
        ],
        "properties": {
          "enqueue": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Dequeues the message sender stopping them from receiving ticks. Only callable if the message sender is currently enqueued.",
        "type": "object",
        "required": [
          "dequeue"
        ],
        "properties": {
          "dequeue": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Wakes the state machine up. The caller should check the sender of the tick is the clock if they'd like to pause when the clock does.",
        "type": "object",
        "required": [
          "tick"
        ],
        "properties": {
          "tick": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns true if `address` is in the queue, and false otherwise.",
        "type": "object",
        "required": [
          "is_queued"
        ],
        "properties": {
          "is_queued": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Paginated query for all the elements in the queue. Returns elements in asending order by address in the form (address, timestamp) where timestamp is the nanosecond unix timestamp at which address was added to the queue.",
        "type": "object",
        "required": [
          "queue"
        ],
        "properties": {
          "queue": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries the current tick max gas, as set during instantiation and updated via migration.",
        "type": "object",
        "required": [
          "tick_max_gas"
        ],
        "properties": {
          "tick_max_gas": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries if the contract is paused.",
        "type": "object",
        "required": [
          "paused"
        ],
        "properties": {
          "paused": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries if the contract is paused.",
        "type": "object",
        "required": [
          "whitelist"
        ],
        "properties": {
          "whitelist": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "oneOf": [
      {
        "description": "Pauses the clock. No `ExecuteMsg` messages will be executable until the clock is unpaused. Callable only if the clock is unpaused.",
        "type": "object",
        "required": [
          "pause"
        ],
        "properties": {
          "pause": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Unpauses the clock. Callable only if the clock is paused.",
        "type": "object",
        "required": [
          "unpause"
        ],
        "properties": {
          "unpause": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the max gas allowed to be consumed by a tick. This should be no larger than 100_000 less the block max gas so as to save enough gas to process the tick's error.",
        "type": "object",
        "required": [
          "update_tick_max_gas"
        ],
        "properties": {
          "update_tick_max_gas": {
            "type": "object",
            "required": [
              "new_value"
            ],
            "properties": {
              "new_value": {
                "$ref": "#/definitions/Uint64"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_code_id"
        ],
        "properties": {
          "update_code_id": {
            "type": "object",
            "properties": {
              "data": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "manage_whitelist"
        ],
        "properties": {
          "manage_whitelist": {
            "type": "object",
            "properties": {
              "add": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "string"
                }
              },
              "remove": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "sudo": null,
  "responses": {
    "is_queued": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "paused": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Tuple_of_Addr_and_uint64",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/Addr"
          },
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "tick_max_gas": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint64",
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "whitelist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Addr",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Addr"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    }
  }
}
