{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "initial_queue",
    "whitelist"
  ],
  "properties": {
    "initial_queue": {
      "description": "Initial list of contracts to be enqueued (so they don't need to call `Enqueue` themselves)",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "tick_max_gas": {
      "description": "The max gas that may be used by a tick receiver. If more than this amount of gas is used, the tick will be treated as if it errored, and it will be sent to the back of the queue.\n\nAt the most, this should be no larger than 100_000 gas less the chain's block max gas. This overhead is needed so the clock always has enough gas after executing the tick to handle its failure.\n\nThis value may be updated later by the contract admin.",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "whitelist": {
      "description": "Whitelist of contracts that are allowed to be queued and ticked",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
