{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MigrateMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "fallback_address": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FallbackAddressUpdateConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "next_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "op_mode": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractOperationModeConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "remote_chain_info": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RemoteChainInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "transfer_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_code_id"
      ],
      "properties": {
        "update_code_id": {
          "type": "object",
          "properties": {
            "data": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ContractOperationModeConfig": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "permissionless"
          ]
        },
        {
          "type": "object",
          "required": [
            "permissioned"
          ],
          "properties": {
            "permissioned": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FallbackAddressUpdateConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "explicit_address"
          ],
          "properties": {
            "explicit_address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "disable"
          ],
          "properties": {
            "disable": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RemoteChainInfo": {
      "type": "object",
      "required": [
        "channel_id",
        "connection_id",
        "denom",
        "ibc_transfer_timeout",
        "ica_timeout"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "connection_id": {
          "description": "connection id from neutron to the remote chain on which we wish to open an ICA",
          "type": "string"
        },
        "denom": {
          "type": "string"
        },
        "ibc_transfer_timeout": {
          "$ref": "#/definitions/Uint64"
        },
        "ica_timeout": {
          "$ref": "#/definitions/Uint64"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
