{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "clock_address",
    "denoms",
    "destination_config"
  ],
  "properties": {
    "clock_address": {
      "description": "address for the clock. this contract verifies that only the clock can execute ticks",
      "type": "string"
    },
    "denoms": {
      "description": "specified denoms to route",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "destination_config": {
      "description": "config that determines how to facilitate the ibc routing",
      "allOf": [
        {
          "$ref": "#/definitions/DestinationConfig"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "DestinationConfig": {
      "type": "object",
      "required": [
        "denom_to_pfm_map",
        "destination_receiver_addr",
        "ibc_transfer_timeout",
        "local_to_destination_chain_channel_id"
      ],
      "properties": {
        "denom_to_pfm_map": {
          "description": "pfm configurations for denoms",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PacketForwardMiddlewareConfig"
          }
        },
        "destination_receiver_addr": {
          "description": "address of the receiver on destination chain",
          "type": "string"
        },
        "ibc_transfer_timeout": {
          "description": "timeout in seconds",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "local_to_destination_chain_channel_id": {
          "description": "channel id of the destination chain",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PacketForwardMiddlewareConfig": {
      "type": "object",
      "required": [
        "hop_chain_receiver_address",
        "hop_to_destination_chain_channel_id",
        "local_to_hop_chain_channel_id"
      ],
      "properties": {
        "hop_chain_receiver_address": {
          "type": "string"
        },
        "hop_to_destination_chain_channel_id": {
          "type": "string"
        },
        "local_to_hop_chain_channel_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
