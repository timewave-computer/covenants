{
  "contract_name": "covenant-ls",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "clock_address",
      "ibc_fee",
      "ibc_transfer_timeout",
      "ica_timeout",
      "lp_address",
      "ls_denom",
      "neutron_stride_ibc_connection_id",
      "stride_neutron_ibc_transfer_channel_id"
    ],
    "properties": {
      "clock_address": {
        "description": "Address for the clock. This contract verifies that only the clock can execute Ticks",
        "type": "string"
      },
      "ibc_fee": {
        "description": "Neutron requires fees to be set to refund relayers for submission of ack and timeout messages. recv_fee and ack_fee paid in untrn from this contract",
        "allOf": [
          {
            "$ref": "#/definitions/IbcFee"
          }
        ]
      },
      "ibc_transfer_timeout": {
        "description": "Timeout in seconds. This is used to craft a timeout timestamp that will be attached to the IBC transfer message from the ICA on the host chain (Stride) to its destination. Typically this timeout should be greater than the ICA timeout, otherwise if the ICA times out, the destination chain receiving the funds will also receive the IBC packet with an expired timestamp.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "ica_timeout": {
        "description": "Time in seconds for ICA SubmitTX messages from Neutron Note that ICA uses ordered channels, a timeout implies channel closed. We can reopen the channel by reregistering the ICA with the same port id and connection id",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "lp_address": {
        "description": "Address for the covenant's LP contract. We send the liquid staked amount to this address",
        "type": "string"
      },
      "ls_denom": {
        "description": "The liquid staked denom (e.g., stuatom). This is required because we only allow transfers of this denom out of the LSer",
        "type": "string"
      },
      "neutron_stride_ibc_connection_id": {
        "description": "IBC connection ID on Neutron for Stride We make an Interchain Account over this connection",
        "type": "string"
      },
      "stride_neutron_ibc_transfer_channel_id": {
        "description": "IBC transfer channel on Stride for Neutron This is used to IBC transfer stuatom on Stride to the LP contract",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "IbcFee": {
        "description": "IbcFee defines struct for fees that refund the relayer for `SudoMsg` messages submission. Unused fee kind will be returned back to message sender. Please refer to these links for more information: IBC transaction structure - <https://docs.neutron.org/neutron/interchain-txs/messages/#msgsubmittx> General mechanics of fee payments - <https://docs.neutron.org/neutron/feerefunder/overview/#general-mechanics>",
        "type": "object",
        "required": [
          "ack_fee",
          "recv_fee",
          "timeout_fee"
        ],
        "properties": {
          "ack_fee": {
            "description": "*ack_fee** is an amount of coins to refund relayer for submitting ack message for a particular IBC packet.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "recv_fee": {
            "description": "**recv_fee** currently is used for compatibility with ICS-29 interface only and must be set to zero (i.e. 0untrn), because Neutron's fee module can't refund relayer for submission of Recv IBC packets due to compatibility with target chains.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "timeout_fee": {
            "description": "*timeout_fee** amount of coins to refund relayer for submitting timeout message for a particular IBC packet.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "The transfer message allows anybody to permissionlessly transfer a specified amount of tokens of the preset ls_denom from the ICA of the host chain to the preset lp_address",
        "type": "object",
        "required": [
          "transfer"
        ],
        "properties": {
          "transfer": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Wakes the state machine up. The caller should check the sender of the tick is the clock if they'd like to pause when the clock does.",
        "type": "object",
        "required": [
          "tick"
        ],
        "properties": {
          "tick": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "clock_address"
        ],
        "properties": {
          "clock_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stride_i_c_a"
        ],
        "properties": {
          "stride_i_c_a": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lp_address"
        ],
        "properties": {
          "lp_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "contract_state"
        ],
        "properties": {
          "contract_state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "acknowledgement_result"
        ],
        "properties": {
          "acknowledgement_result": {
            "type": "object",
            "required": [
              "interchain_account_id",
              "sequence_id"
            ],
            "properties": {
              "interchain_account_id": {
                "type": "string"
              },
              "sequence_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "errors_queue"
        ],
        "properties": {
          "errors_queue": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remote_chain_info"
        ],
        "properties": {
          "remote_chain_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "clock_addr": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "lp_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "remote_chain_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/RemoteChainInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_code_id"
        ],
        "properties": {
          "update_code_id": {
            "type": "object",
            "properties": {
              "data": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "IbcFee": {
        "description": "IbcFee defines struct for fees that refund the relayer for `SudoMsg` messages submission. Unused fee kind will be returned back to message sender. Please refer to these links for more information: IBC transaction structure - <https://docs.neutron.org/neutron/interchain-txs/messages/#msgsubmittx> General mechanics of fee payments - <https://docs.neutron.org/neutron/feerefunder/overview/#general-mechanics>",
        "type": "object",
        "required": [
          "ack_fee",
          "recv_fee",
          "timeout_fee"
        ],
        "properties": {
          "ack_fee": {
            "description": "*ack_fee** is an amount of coins to refund relayer for submitting ack message for a particular IBC packet.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "recv_fee": {
            "description": "**recv_fee** currently is used for compatibility with ICS-29 interface only and must be set to zero (i.e. 0untrn), because Neutron's fee module can't refund relayer for submission of Recv IBC packets due to compatibility with target chains.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "timeout_fee": {
            "description": "*timeout_fee** amount of coins to refund relayer for submitting timeout message for a particular IBC packet.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        }
      },
      "RemoteChainInfo": {
        "type": "object",
        "required": [
          "channel_id",
          "connection_id",
          "denom",
          "ibc_fee",
          "ibc_transfer_timeout",
          "ica_timeout"
        ],
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "connection_id": {
            "description": "connection id from neutron to the remote chain on which we wish to open an ICA",
            "type": "string"
          },
          "denom": {
            "type": "string"
          },
          "ibc_fee": {
            "$ref": "#/definitions/IbcFee"
          },
          "ibc_transfer_timeout": {
            "$ref": "#/definitions/Uint64"
          },
          "ica_timeout": {
            "$ref": "#/definitions/Uint64"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "sudo": null,
  "responses": {
    "acknowledgement_result": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_AcknowledgementResult",
      "anyOf": [
        {
          "$ref": "#/definitions/AcknowledgementResult"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "AcknowledgementResult": {
          "description": "Serves for storing acknowledgement calls for interchain transactions",
          "oneOf": [
            {
              "description": "Success - Got success acknowledgement in sudo with array of message item types in it",
              "type": "object",
              "required": [
                "success"
              ],
              "properties": {
                "success": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Error - Got error acknowledgement in sudo with payload message in it and error details",
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Timeout - Got timeout acknowledgement in sudo with payload message in it",
              "type": "object",
              "required": [
                "timeout"
              ],
              "properties": {
                "timeout": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "clock_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "contract_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractState",
      "type": "string",
      "enum": [
        "instantiated",
        "i_c_a_created"
      ]
    },
    "errors_queue": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Tuple_of_Array_of_uint8_and_String",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "lp_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "remote_chain_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RemoteChainInfo",
      "type": "object",
      "required": [
        "channel_id",
        "connection_id",
        "denom",
        "ibc_fee",
        "ibc_transfer_timeout",
        "ica_timeout"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "connection_id": {
          "description": "connection id from neutron to the remote chain on which we wish to open an ICA",
          "type": "string"
        },
        "denom": {
          "type": "string"
        },
        "ibc_fee": {
          "$ref": "#/definitions/IbcFee"
        },
        "ibc_transfer_timeout": {
          "$ref": "#/definitions/Uint64"
        },
        "ica_timeout": {
          "$ref": "#/definitions/Uint64"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "IbcFee": {
          "description": "IbcFee defines struct for fees that refund the relayer for `SudoMsg` messages submission. Unused fee kind will be returned back to message sender. Please refer to these links for more information: IBC transaction structure - <https://docs.neutron.org/neutron/interchain-txs/messages/#msgsubmittx> General mechanics of fee payments - <https://docs.neutron.org/neutron/feerefunder/overview/#general-mechanics>",
          "type": "object",
          "required": [
            "ack_fee",
            "recv_fee",
            "timeout_fee"
          ],
          "properties": {
            "ack_fee": {
              "description": "*ack_fee** is an amount of coins to refund relayer for submitting ack message for a particular IBC packet.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "recv_fee": {
              "description": "**recv_fee** currently is used for compatibility with ICS-29 interface only and must be set to zero (i.e. 0untrn), because Neutron's fee module can't refund relayer for submission of Recv IBC packets due to compatibility with target chains.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "timeout_fee": {
              "description": "*timeout_fee** amount of coins to refund relayer for submitting timeout message for a particular IBC packet.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "stride_i_c_a": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
