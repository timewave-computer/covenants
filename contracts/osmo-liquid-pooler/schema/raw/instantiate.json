{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "funding_duration",
    "holder_address",
    "lp_token_denom",
    "note_address",
    "op_mode_cfg",
    "osmo_ibc_timeout",
    "osmo_outpost",
    "osmo_to_neutron_channel_id",
    "party_1_chain_info",
    "party_1_denom_info",
    "party_2_chain_info",
    "party_2_denom_info",
    "pool_id",
    "pool_price_config",
    "single_side_lp_limits"
  ],
  "properties": {
    "funding_duration": {
      "$ref": "#/definitions/Duration"
    },
    "holder_address": {
      "type": "string"
    },
    "lp_token_denom": {
      "type": "string"
    },
    "note_address": {
      "type": "string"
    },
    "op_mode_cfg": {
      "$ref": "#/definitions/ContractOperationModeConfig"
    },
    "osmo_ibc_timeout": {
      "$ref": "#/definitions/Uint64"
    },
    "osmo_outpost": {
      "type": "string"
    },
    "osmo_to_neutron_channel_id": {
      "type": "string"
    },
    "party_1_chain_info": {
      "$ref": "#/definitions/PartyChainInfo"
    },
    "party_1_denom_info": {
      "$ref": "#/definitions/PartyDenomInfo"
    },
    "party_2_chain_info": {
      "$ref": "#/definitions/PartyChainInfo"
    },
    "party_2_denom_info": {
      "$ref": "#/definitions/PartyDenomInfo"
    },
    "pool_id": {
      "$ref": "#/definitions/Uint64"
    },
    "pool_price_config": {
      "$ref": "#/definitions/PoolPriceConfig"
    },
    "single_side_lp_limits": {
      "$ref": "#/definitions/SingleSideLpLimits"
    },
    "slippage_tolerance": {
      "anyOf": [
        {
          "$ref": "#/definitions/Decimal"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ContractOperationModeConfig": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "permissionless"
          ]
        },
        {
          "type": "object",
          "required": [
            "permissioned"
          ],
          "properties": {
            "permissioned": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ForwardMetadata": {
      "type": "object",
      "required": [
        "channel",
        "port",
        "receiver"
      ],
      "properties": {
        "channel": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "receiver": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PartyChainInfo": {
      "type": "object",
      "required": [
        "ibc_timeout",
        "neutron_to_party_chain_channel",
        "party_chain_to_neutron_channel"
      ],
      "properties": {
        "ibc_timeout": {
          "$ref": "#/definitions/Uint64"
        },
        "inwards_pfm": {
          "description": "pfm configuration used to route funds from osmosis to local chain via origin chain",
          "anyOf": [
            {
              "$ref": "#/definitions/ForwardMetadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "neutron_to_party_chain_channel": {
          "description": "channel id to route funds from local chain to party chain",
          "type": "string"
        },
        "outwards_pfm": {
          "description": "pfm configuration used to route funds from local chain to osmosis via origin chain",
          "anyOf": [
            {
              "$ref": "#/definitions/ForwardMetadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "party_chain_to_neutron_channel": {
          "description": "channel id to route funds from party chain to local chain",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PartyDenomInfo": {
      "type": "object",
      "required": [
        "local_denom",
        "osmosis_coin"
      ],
      "properties": {
        "local_denom": {
          "description": "ibc denom on liquid pooler chain",
          "type": "string"
        },
        "osmosis_coin": {
          "description": "coin as denominated on osmosis",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolPriceConfig": {
      "description": "config for the pool price expectations upon covenant instantiation",
      "type": "object",
      "required": [
        "acceptable_price_spread",
        "expected_spot_price"
      ],
      "properties": {
        "acceptable_price_spread": {
          "$ref": "#/definitions/Decimal"
        },
        "expected_spot_price": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "SingleSideLpLimits": {
      "description": "single side lp limits define the highest amount (in `Uint128`) that we consider acceptable to provide single-sided. if asset balance exceeds these limits, double-sided liquidity should be provided.",
      "type": "object",
      "required": [
        "asset_a_limit",
        "asset_b_limit"
      ],
      "properties": {
        "asset_a_limit": {
          "$ref": "#/definitions/Uint128"
        },
        "asset_b_limit": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
