{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "amount",
    "denom",
    "ibc_transfer_timeout",
    "ica_timeout",
    "op_mode_cfg",
    "remote_chain_channel_id",
    "remote_chain_connection_id",
    "splits"
  ],
  "properties": {
    "amount": {
      "$ref": "#/definitions/Uint128"
    },
    "denom": {
      "type": "string"
    },
    "fallback_address": {
      "type": [
        "string",
        "null"
      ]
    },
    "ibc_transfer_timeout": {
      "description": "Timeout in seconds. This is used to craft a timeout timestamp that will be attached to the IBC transfer message from the ICA on the host chain (Stride) to its destination. Typically this timeout should be greater than the ICA timeout, otherwise if the ICA times out, the destination chain receiving the funds will also receive the IBC packet with an expired timestamp.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "ica_timeout": {
      "description": "Time in seconds for ICA SubmitTX messages from Neutron Note that ICA uses ordered channels, a timeout implies channel closed. We can reopen the channel by reregistering the ICA with the same port id and connection id",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "op_mode_cfg": {
      "$ref": "#/definitions/ContractOperationModeConfig"
    },
    "remote_chain_channel_id": {
      "type": "string"
    },
    "remote_chain_connection_id": {
      "type": "string"
    },
    "splits": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/SplitConfig"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ContractOperationModeConfig": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "permissionless"
          ]
        },
        {
          "type": "object",
          "required": [
            "permissioned"
          ],
          "properties": {
            "permissioned": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SplitConfig": {
      "type": "object",
      "required": [
        "receivers"
      ],
      "properties": {
        "receivers": {
          "description": "map receiver address to its share of the split",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Decimal"
          }
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
