{
  "contract_name": "valence-covenant-swap",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "contract_codes",
      "label",
      "lockup_config",
      "party_a_config",
      "party_b_config",
      "splits",
      "timeouts"
    ],
    "properties": {
      "clock_tick_max_gas": {
        "anyOf": [
          {
            "$ref": "#/definitions/Uint64"
          },
          {
            "type": "null"
          }
        ]
      },
      "contract_codes": {
        "$ref": "#/definitions/SwapCovenantContractCodeIds"
      },
      "fallback_address": {
        "type": [
          "string",
          "null"
        ]
      },
      "fallback_split": {
        "anyOf": [
          {
            "$ref": "#/definitions/SplitConfig"
          },
          {
            "type": "null"
          }
        ]
      },
      "label": {
        "type": "string"
      },
      "lockup_config": {
        "$ref": "#/definitions/Expiration"
      },
      "party_a_config": {
        "$ref": "#/definitions/CovenantPartyConfig"
      },
      "party_b_config": {
        "$ref": "#/definitions/CovenantPartyConfig"
      },
      "splits": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/SplitConfig"
        }
      },
      "timeouts": {
        "$ref": "#/definitions/Timeouts"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CovenantPartyConfig": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "interchain"
            ],
            "properties": {
              "interchain": {
                "$ref": "#/definitions/InterchainCovenantParty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "$ref": "#/definitions/NativeCovenantParty"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InterchainCovenantParty": {
        "type": "object",
        "required": [
          "addr",
          "contribution",
          "denom_to_pfm_map",
          "host_to_party_chain_channel_id",
          "ibc_transfer_timeout",
          "native_denom",
          "party_chain_connection_id",
          "party_receiver_addr",
          "party_to_host_chain_channel_id",
          "remote_chain_denom"
        ],
        "properties": {
          "addr": {
            "description": "authorized address of the party on neutron",
            "type": "string"
          },
          "contribution": {
            "description": "coin provided by the party on its native chain",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "denom_to_pfm_map": {
            "description": "configuration for unwinding the denoms via pfm",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/PacketForwardMiddlewareConfig"
            }
          },
          "fallback_address": {
            "description": "fallback refund address on the remote chain",
            "type": [
              "string",
              "null"
            ]
          },
          "host_to_party_chain_channel_id": {
            "description": "channel id from host chain to the party chain",
            "type": "string"
          },
          "ibc_transfer_timeout": {
            "description": "timeout in seconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          },
          "native_denom": {
            "description": "denom provided by the party on neutron",
            "type": "string"
          },
          "party_chain_connection_id": {
            "description": "connection id to the party chain",
            "type": "string"
          },
          "party_receiver_addr": {
            "description": "address of the receiver on destination chain",
            "type": "string"
          },
          "party_to_host_chain_channel_id": {
            "description": "channel id from party to host chain",
            "type": "string"
          },
          "remote_chain_denom": {
            "description": "denom provided by the party on its native chain",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NativeCovenantParty": {
        "type": "object",
        "required": [
          "addr",
          "contribution",
          "native_denom",
          "party_receiver_addr"
        ],
        "properties": {
          "addr": {
            "description": "authorized address of the party on neutron",
            "type": "string"
          },
          "contribution": {
            "description": "coin provided by the party on its native chain",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "native_denom": {
            "description": "denom provided by the party on neutron",
            "type": "string"
          },
          "party_receiver_addr": {
            "description": "address of the receiver on destination chain",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PacketForwardMiddlewareConfig": {
        "type": "object",
        "required": [
          "hop_chain_receiver_address",
          "hop_to_destination_chain_channel_id",
          "local_to_hop_chain_channel_id"
        ],
        "properties": {
          "hop_chain_receiver_address": {
            "type": "string"
          },
          "hop_to_destination_chain_channel_id": {
            "type": "string"
          },
          "local_to_hop_chain_channel_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SplitConfig": {
        "type": "object",
        "required": [
          "receivers"
        ],
        "properties": {
          "receivers": {
            "description": "map receiver address to its share of the split",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Decimal"
            }
          }
        },
        "additionalProperties": false
      },
      "SwapCovenantContractCodeIds": {
        "type": "object",
        "required": [
          "clock_code",
          "holder_code",
          "ibc_forwarder_code",
          "interchain_router_code",
          "native_router_code",
          "splitter_code"
        ],
        "properties": {
          "clock_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "holder_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "ibc_forwarder_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "interchain_router_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "native_router_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "splitter_code": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Timeouts": {
        "type": "object",
        "required": [
          "ibc_transfer_timeout",
          "ica_timeout"
        ],
        "properties": {
          "ibc_transfer_timeout": {
            "description": "ibc transfer timeout in seconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          },
          "ica_timeout": {
            "description": "ica timeout in seconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "type": "string",
    "enum": []
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "clock_address"
        ],
        "properties": {
          "clock_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "holder_address"
        ],
        "properties": {
          "holder_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "splitter_address"
        ],
        "properties": {
          "splitter_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "interchain_router_address"
        ],
        "properties": {
          "interchain_router_address": {
            "type": "object",
            "required": [
              "party"
            ],
            "properties": {
              "party": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ibc_forwarder_address"
        ],
        "properties": {
          "ibc_forwarder_address": {
            "type": "object",
            "required": [
              "party"
            ],
            "properties": {
              "party": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "party_deposit_address"
        ],
        "properties": {
          "party_deposit_address": {
            "type": "object",
            "required": [
              "party"
            ],
            "properties": {
              "party": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "contract_codes"
        ],
        "properties": {
          "contract_codes": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_covenant"
        ],
        "properties": {
          "update_covenant": {
            "type": "object",
            "properties": {
              "clock": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "codes": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CovenantContractCodes"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "holder": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg2"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "party_a_forwarder": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg6"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "party_a_router": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/RouterMigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "party_b_forwarder": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg6"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "party_b_router": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/RouterMigrateMsg"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "splitter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MigrateMsg3"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_code_id"
        ],
        "properties": {
          "update_code_id": {
            "type": "object",
            "properties": {
              "data": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CovenantContractCodes": {
        "type": "object",
        "required": [
          "clock",
          "holder",
          "party_a_forwarder",
          "party_a_router",
          "party_b_forwarder",
          "party_b_router",
          "splitter"
        ],
        "properties": {
          "clock": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "holder": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "party_a_forwarder": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "party_a_router": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "party_b_forwarder": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "party_b_router": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "splitter": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "CovenantPartiesConfig": {
        "type": "object",
        "required": [
          "party_a",
          "party_b"
        ],
        "properties": {
          "party_a": {
            "$ref": "#/definitions/CovenantParty"
          },
          "party_b": {
            "$ref": "#/definitions/CovenantParty"
          }
        },
        "additionalProperties": false
      },
      "CovenantParty": {
        "type": "object",
        "required": [
          "addr",
          "native_denom",
          "receiver_config"
        ],
        "properties": {
          "addr": {
            "description": "authorized address of the party",
            "type": "string"
          },
          "native_denom": {
            "description": "denom provided by the party",
            "type": "string"
          },
          "receiver_config": {
            "description": "information about receiver address",
            "allOf": [
              {
                "$ref": "#/definitions/ReceiverConfig"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CovenantTerms": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "token_swap"
            ],
            "properties": {
              "token_swap": {
                "$ref": "#/definitions/SwapCovenantTerms"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DestinationConfig": {
        "type": "object",
        "required": [
          "denom_to_pfm_map",
          "destination_receiver_addr",
          "ibc_transfer_timeout",
          "local_to_destination_chain_channel_id"
        ],
        "properties": {
          "denom_to_pfm_map": {
            "description": "pfm configurations for denoms",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/PacketForwardMiddlewareConfig"
            }
          },
          "destination_receiver_addr": {
            "description": "address of the receiver on destination chain",
            "type": "string"
          },
          "ibc_transfer_timeout": {
            "description": "timeout in seconds",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          },
          "local_to_destination_chain_channel_id": {
            "description": "channel id of the destination chain",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FallbackAddressUpdateConfig": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "explicit_address"
            ],
            "properties": {
              "explicit_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "disable"
            ],
            "properties": {
              "disable": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MigrateMsg": {
        "oneOf": [
          {
            "description": "Pauses the clock. No `ExecuteMsg` messages will be executable until the clock is unpaused. Callable only if the clock is unpaused.",
            "type": "object",
            "required": [
              "pause"
            ],
            "properties": {
              "pause": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Unpauses the clock. Callable only if the clock is paused.",
            "type": "object",
            "required": [
              "unpause"
            ],
            "properties": {
              "unpause": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Updates the max gas allowed to be consumed by a tick. This should be no larger than 100_000 less the block max gas so as to save enough gas to process the tick's error.",
            "type": "object",
            "required": [
              "update_tick_max_gas"
            ],
            "properties": {
              "update_tick_max_gas": {
                "type": "object",
                "required": [
                  "new_value"
                ],
                "properties": {
                  "new_value": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "manage_whitelist"
            ],
            "properties": {
              "manage_whitelist": {
                "type": "object",
                "properties": {
                  "add": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "remove": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MigrateMsg2": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "clock_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "covenant_terms": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/CovenantTerms"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lockup_config": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "next_contract": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "parites_config": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/CovenantPartiesConfig"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "refund_config": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/RefundConfig"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MigrateMsg3": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "clock_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "fallback_split": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SplitConfig"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "splits": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "$ref": "#/definitions/SplitConfig"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MigrateMsg4": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "clock_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "destination_config": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/DestinationConfig"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "target_denoms": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MigrateMsg5": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "clock_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "receiver_address": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "target_denoms": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MigrateMsg6": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "clock_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "fallback_address": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/FallbackAddressUpdateConfig"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "next_contract": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "remote_chain_info": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/RemoteChainInfo"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "transfer_amount": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_code_id"
            ],
            "properties": {
              "update_code_id": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PacketForwardMiddlewareConfig": {
        "type": "object",
        "required": [
          "hop_chain_receiver_address",
          "hop_to_destination_chain_channel_id",
          "local_to_hop_chain_channel_id"
        ],
        "properties": {
          "hop_chain_receiver_address": {
            "type": "string"
          },
          "hop_to_destination_chain_channel_id": {
            "type": "string"
          },
          "local_to_hop_chain_channel_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReceiverConfig": {
        "oneOf": [
          {
            "description": "party expects to receive funds on the same chain",
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "party expects to receive funds on a remote chain",
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/DestinationConfig"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RefundConfig": {
        "type": "object",
        "required": [
          "party_a_refund_address",
          "party_b_refund_address"
        ],
        "properties": {
          "party_a_refund_address": {
            "type": "string"
          },
          "party_b_refund_address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RemoteChainInfo": {
        "type": "object",
        "required": [
          "channel_id",
          "connection_id",
          "denom",
          "ibc_transfer_timeout",
          "ica_timeout"
        ],
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "connection_id": {
            "description": "connection id from neutron to the remote chain on which we wish to open an ICA",
            "type": "string"
          },
          "denom": {
            "type": "string"
          },
          "ibc_transfer_timeout": {
            "$ref": "#/definitions/Uint64"
          },
          "ica_timeout": {
            "$ref": "#/definitions/Uint64"
          }
        },
        "additionalProperties": false
      },
      "RouterMigrateMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "interchain"
            ],
            "properties": {
              "interchain": {
                "$ref": "#/definitions/MigrateMsg4"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "$ref": "#/definitions/MigrateMsg5"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SplitConfig": {
        "type": "object",
        "required": [
          "receivers"
        ],
        "properties": {
          "receivers": {
            "description": "map receiver address to its share of the split",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Decimal"
            }
          }
        },
        "additionalProperties": false
      },
      "SwapCovenantTerms": {
        "type": "object",
        "required": [
          "party_a_amount",
          "party_b_amount"
        ],
        "properties": {
          "party_a_amount": {
            "$ref": "#/definitions/Uint128"
          },
          "party_b_amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "sudo": null,
  "responses": {
    "clock_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "contract_codes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CovenantContractCodes",
      "type": "object",
      "required": [
        "clock",
        "holder",
        "party_a_forwarder",
        "party_a_router",
        "party_b_forwarder",
        "party_b_router",
        "splitter"
      ],
      "properties": {
        "clock": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "holder": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "party_a_forwarder": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "party_a_router": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "party_b_forwarder": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "party_b_router": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "splitter": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "holder_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "ibc_forwarder_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "interchain_router_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "party_deposit_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "splitter_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
