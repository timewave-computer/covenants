{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MigrateMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "clock_addr": {
              "type": [
                "string",
                "null"
              ]
            },
            "covenant_terms": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CovenantTerms"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lockup_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "next_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "parites_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CovenantPartiesConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "refund_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RefundConfig"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_code_id"
      ],
      "properties": {
        "update_code_id": {
          "type": "object",
          "properties": {
            "data": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CovenantPartiesConfig": {
      "type": "object",
      "required": [
        "party_a",
        "party_b"
      ],
      "properties": {
        "party_a": {
          "$ref": "#/definitions/CovenantParty"
        },
        "party_b": {
          "$ref": "#/definitions/CovenantParty"
        }
      },
      "additionalProperties": false
    },
    "CovenantParty": {
      "type": "object",
      "required": [
        "addr",
        "native_denom",
        "receiver_config"
      ],
      "properties": {
        "addr": {
          "description": "authorized address of the party",
          "type": "string"
        },
        "native_denom": {
          "description": "denom provided by the party",
          "type": "string"
        },
        "receiver_config": {
          "description": "information about receiver address",
          "allOf": [
            {
              "$ref": "#/definitions/ReceiverConfig"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CovenantTerms": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token_swap"
          ],
          "properties": {
            "token_swap": {
              "$ref": "#/definitions/SwapCovenantTerms"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DestinationConfig": {
      "type": "object",
      "required": [
        "denom_to_pfm_map",
        "destination_receiver_addr",
        "ibc_transfer_timeout",
        "local_to_destination_chain_channel_id"
      ],
      "properties": {
        "denom_to_pfm_map": {
          "description": "pfm configurations for denoms",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PacketForwardMiddlewareConfig"
          }
        },
        "destination_receiver_addr": {
          "description": "address of the receiver on destination chain",
          "type": "string"
        },
        "ibc_transfer_timeout": {
          "description": "timeout in seconds",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "local_to_destination_chain_channel_id": {
          "description": "channel id of the destination chain",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PacketForwardMiddlewareConfig": {
      "type": "object",
      "required": [
        "hop_chain_receiver_address",
        "hop_to_destination_chain_channel_id",
        "local_to_hop_chain_channel_id"
      ],
      "properties": {
        "hop_chain_receiver_address": {
          "type": "string"
        },
        "hop_to_destination_chain_channel_id": {
          "type": "string"
        },
        "local_to_hop_chain_channel_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ReceiverConfig": {
      "oneOf": [
        {
          "description": "party expects to receive funds on the same chain",
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "party expects to receive funds on a remote chain",
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/DestinationConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RefundConfig": {
      "type": "object",
      "required": [
        "party_a_refund_address",
        "party_b_refund_address"
      ],
      "properties": {
        "party_a_refund_address": {
          "type": "string"
        },
        "party_b_refund_address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SwapCovenantTerms": {
      "type": "object",
      "required": [
        "party_a_amount",
        "party_b_amount"
      ],
      "properties": {
        "party_a_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "party_b_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
